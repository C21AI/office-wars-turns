app ProjectBird {
  wasp: {
    version: "^0.10.2"
  },
  title: "Office Wars - A Strategy Game",
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login"
  },
  client: {
    rootComponent: import App from "@client/App",
  },
  dependencies: [
    ("react-p5", "1.3.35")
  ]
}

// üì° Wasp Routes

route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import Main from "@client/MainPage"
}

route GameRoute { path: "/game", to: GamePage }
page GamePage {
  authRequired: true,
  component: import GamePage from "@client/GamePage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/auth/SignupPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/auth/LoginPage"
}

// üìö Queries

query getTank {
  fn: import { getTank } from "@server/queries.js",
  entities: [Tank]
}

query getGame {
  fn: import { getGame } from "@server/queries.js",
  entities: [Game, User]
}

query getFOV {
  fn: import { getFOV } from "@server/queries.js",
  entities: [Game]
}


// üìù Actions

action addTank {
  fn: import { addTank } from "@server/actions.js",
}

action updateTank {
  fn: import { updateTank } from "@server/actions.js",
  entities: [Tank, Game]
}

action removeTank {
  fn: import { removeTank } from "@server/actions.js",
  entities: [Tank, Game]
}

action generateGame {
  fn: import { generateGame } from "@server/actions.js",
  entities: [Game, Board]
}

action abandonGame {
  fn: import { abandonGame } from "@server/actions.js",
  entities: [User]
}

action joinGame {
  fn: import { joinGame } from "@server/actions.js",
  entities: [Game, PlayerInGame]
}

action launchGame {
  fn: import { launchGame } from "@server/actions.js",
  entities: [Game, User]
}

// üì¶ Entities

entity User {=psl
  id        Int     @id @default(autoincrement())
  username  String  @unique
  password  String
  adminOf   Game[]
  playsIn   PlayerInGame[]
  tanks     Tank[]
psl=}

entity Game {=psl
  id          Int       @id @default(autoincrement())
  code        String    @unique
  state       String    @default("lobby") // should be an enum but that's not supported yet
  admin       User      @relation(fields: [adminId], references: [id])
  adminId     Int
  started_at  DateTime?
  ended_at    DateTime?
  board       Board?
  players     PlayerInGame[]
  plays       PlayInGame[]
psl=}

entity Board {=psl
  id      Int     @id @default(autoincrement())
  game    Game    @relation(fields: [gameId], references: [id])
  gameId  Int     @unique 
  state   String   @default("[]")   
psl=}

entity PlayerInGame {=psl
  id          Int    @id @default(autoincrement())
  order       Int
  game        Game   @relation(fields: [gameId], references: [id])
  gameId      Int
  user        User   @relation(fields: [userId], references: [id])
  userId      Int
  state       String  @default("[]")
  tank        Tank   @relation(fields: [tankId], references: [id])
  tankId      Int
  mp          Int    @default(10)
  hp          Int    @default(100)
  plays       PlayInGame[]
  @@unique([gameId, userId])
psl=}

entity Tank {=psl
  id          Int    @id @default(autoincrement())
  agility     Int    @default(1)
  armor       Int    @default(1)
  accuracy    Int    @default(1)
  attackPower Int    @default(1)
  color       String @default("353f4a")
  creator     User   @relation(fields: [creatorId], references: [id])
  creatorId   Int
  usedOn      PlayerInGame[]
psl=}

entity PlayInGame {=psl
  id          Int             @id @default(autoincrement())
  player      PlayerInGame    @relation(fields: [playerId], references: [id])
  playerId    Int    
  game        Game            @relation(fields: [gameId], references: [id])
  gameId      Int
  play        String           @default("")
psl=}
